import os
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler
import psycopg2
from googleapiclient.discovery import build
from google.oauth2.credentials import Credentials
from PyPDF2 import PdfReader
from docx import Document
import requests
import io
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import re
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN not found in .env!")
    raise ValueError("TELEGRAM_TOKEN not found in .env!")

DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
GOOGLE_SHEETS_CREDENTIALS = "credentials.json"
DB_CONFIG = {
    "dbname": os.getenv("DB_NAME", "postgres"),
    "user": os.getenv("DB_USER", "postgres"),
    "password": os.getenv("DB_PASSWORD", ""),
    "host": os.getenv("DB_HOST", ""),
    "port": os.getenv("DB_PORT", "5432")
}
logger.info(f"Config loaded: TELEGRAM_TOKEN={TELEGRAM_TOKEN[:5]}..., DB_HOST={DB_CONFIG['host']}")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
VACANCY, RESUME, PROCESSING = range(3)

app = FastAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
application = Application.builder().token(TELEGRAM_TOKEN).build()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
def get_sheets_service():
    creds = Credentials.from_authorized_user_file(GOOGLE_SHEETS_CREDENTIALS)
    service = build("sheets", "v4", credentials=creds)
    return service

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
def get_db_connection():
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        logger.info("‚úÖ Database connection established!")
        return conn
    except Exception as e:
        logger.error(f"‚ùå Database connection failed: {e}")
        raise

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def is_authorized_user(user_id):
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT role FROM users WHERE telegram_id = %s", (user_id,))
        result = cursor.fetchone()
        logger.debug(f"Checking user {user_id}, result: {result}")
        cursor.close()
        conn.close()
        return result and result[0] in ["HR", "Employer", "Admin"]
    except Exception as e:
        logger.error(f"‚ùå Authorization check failed: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context):
    user_id = update.effective_user.id
    logger.info(f"Received /start from user {user_id}")
    if not is_authorized_user(user_id):
        await update.message.reply_text("‚õî –û–π-–æ–π! –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Å –≤ –∫–æ–º–∞–Ω–¥—É! üìû")
        return
    await update.message.reply_text(
        "üåü –ü—Ä–∏–≤–µ—Ç, –≥–µ—Ä–æ–π –ø–æ–¥–±–æ—Ä–∞! –Ø —Ç–≤–æ–π AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –∑–≤–µ–∑–¥—É –¥–ª—è —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã! –ù–∞–∂–º–∏ /add_vacancy, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! ‚ú®"
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def add_user(update: Update, context):
    user_id = update.effective_user.id
    logger.info(f"Received /add_user from user {user_id}")
    if not is_authorized_user(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö –≥–µ—Ä–æ–µ–≤! üòÑ")
        return
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT role FROM users WHERE telegram_id = %s", (user_id,))
    role = cursor.fetchone()
    if role and role[0] != 'Admin':
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! üëÆ‚Äç‚ôÇÔ∏è")
        cursor.close()
        conn.close()
        return
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /add_user <telegram_id> <role> (HR, Employer, Admin)! üìù")
        cursor.close()
        conn.close()
        return
    telegram_id, role = int(args[0]), args[1].capitalize()
    if role not in ["HR", "Employer", "Admin"]:
        await update.message.reply_text("‚ö†Ô∏è –†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å HR, Employer –∏–ª–∏ Admin! üòÑ")
        cursor.close()
        conn.close()
        return
    cursor.execute("INSERT INTO users (telegram_id, role) VALUES (%s, %s) ON CONFLICT DO NOTHING", (telegram_id, role))
    conn.commit()
    cursor.close()
    conn.close()
    await update.message.reply_text(f"üéâ –ù–æ–≤—ã–π –≥–µ—Ä–æ–π {telegram_id} —Å —Ä–æ–ª—å—é {role} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É! üöÄ")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
async def add_vacancy(update: Update, context):
    user_id = update.effective_user.id
    logger.info(f"Received /add_vacancy from user {user_id}")
    if not is_authorized_user(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è HR –∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π! üòÑ")
        return ConversationHandler.END
    await update.message.reply_text(
        "üåü –í–≤–µ–¥–∏ –≤–∞–∫–∞–Ω—Å–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–æ–ª–∂–Ω–æ—Å—Ç—å, –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è, –ó–∞—Ä–ø–ª–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, Python, 120–∫')! ‚ú®"
    )
    return VACANCY

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
async def save_vacancy(update: Update, context):
    user_id = update.effective_user.id
    logger.info(f"Saving vacancy for user {user_id}")
    if not is_authorized_user(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! üòû")
        return ConversationHandler.END
    vacancy_data = update.message.text
    parts = vacancy_data.split(",", 2)
    if len(parts) >= 2:
        position = parts[0].strip()
        requirements = parts[1].strip()
        salary = parts[2].strip() if len(parts) > 2 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        vacancy_data = f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}, –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {requirements}, –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary}"
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO vacancies (user_id, vacancy_data) VALUES (%s, %s) RETURNING id",
        (user_id, vacancy_data)
    )
    vacancy_id = cursor.fetchone()[0]
    conn.commit()
    cursor.close()
    conn.close()
    context.user_data["vacancy_id"] = vacancy_id
    context.user_data["vacancy_data"] = vacancy_data
    await update.message.reply_text(f"üéâ –í–∞–∫–∞–Ω—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ó–∞–≥—Ä—É–∑–∏ —Ä–µ–∑—é–º–µ (PDF/DOCX) –∏ –¥–∞–≤–∞–π –Ω–∞–π–¥—ë–º –∑–≤–µ–∑–¥—É! üåü")
    return RESUME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—é–º–µ
async def handle_resume(update: Update, context):
    user_id = update.effective_user.id
    logger.info(f"Handling resume for user {user_id}")
    if not is_authorized_user(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö! üòÑ")
        return ConversationHandler.END
    file = await update.message.document.get_file()
    file_path = await file.download_to_drive()
    text = extract_text(file_path)
    vacancy_id = context.user_data["vacancy_id"]
    
    score, analysis = analyze_resume(text, context.user_data.get("vacancy_data"))
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO resumes (vacancy_id, user_id, resume_text, score, analysis) VALUES (%s, %s, %s, %s, %s)",
        (vacancy_id, user_id, text, score, analysis)
    )
    conn.commit()
    cursor.close()
    conn.close()
    
    append_to_sheets(vacancy_id, text, score, analysis)
    
    pdf_path = generate_pdf_report(vacancy_id, text, score, analysis)
    with open(pdf_path, "rb") as f:
        await update.message.reply_document(document=f, caption="üìã –í–æ—Ç —Ç–≤–æ–π –æ—Ç—á—ë—Ç! üåü")
    
    await update.message.reply_text("üéâ –†–µ–∑—é–º–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ! –•–æ—á–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë? (/add_resume) –ò–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å? (/finish) üöÄ")
    return PROCESSING

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
def extract_text(file_path):
    if file_path.endswith(".pdf"):
        with open(file_path, "rb") as f:
            pdf = PdfReader(f)
            return " ".join(page.extract_text() or "" for page in pdf.pages)
    elif file_path.endswith(".docx"):
        doc = Document(file_path)
        return " ".join(paragraph.text or "" for paragraph in doc.paragraphs)
    return ""

# –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ
def analyze_resume(resume_text, vacancy_data):
    prompt = (
        f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—é–º–µ: {resume_text}\n"
        f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy_data}\n"
        f"–û—Ü–µ–Ω–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10 —Å –æ–¥–Ω–∏–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–º –∑–Ω–∞–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7.5) –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º! üòÑ"
    )
    headers = {"Authorization": f"Bearer {DEEPSEEK_API_KEY}", "Content-Type": "application/json"}
    time.sleep(1)
    response = requests.post(
        "https://api.deepseek.com/chat/completions",
        headers=headers,
        json={"model": "deepseek-chat", "messages": [{"role": "user", "content": prompt}], "stream": False}
    )
    result = response.json()["choices"][0]["message"]["content"]
    score = extract_score(result)
    return score, result

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
def extract_score(gpt_response):
    match = re.search(r"\b\d+\.\d\b", gpt_response)
    return float(match.group()) if match else 5.0

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ Google Sheets
def append_to_sheets(vacancy_id, resume_text, score, analysis):
    service = get_sheets_service()
    sheet = service.spreadsheets()
    values = [[vacancy_id, resume_text[:100], score, analysis[:100]]]
    sheet.values().append(
        spreadsheetId="YOUR_SPREADSHEET_ID",
        range="Sheet1!A:D",
        valueInputOption="RAW",
        body={"values": values}
    ).execute()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á—ë—Ç–∞
def generate_pdf_report(vacancy_id, resume_text, score, analysis):
    output_path = f"report_{vacancy_id}.pdf"
    c = canvas.Canvas(output_path, pagesize=letter)
    c.drawString(100, 750, f"–û—Ç—á—ë—Ç –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ #{vacancy_id} üåü")
    c.drawString(100, 730, f"–û—Ü–µ–Ω–∫–∞: {score:.1f} ‚≠ê")
    c.drawString(100, 710, "–ê–Ω–∞–ª–∏–∑:")
    c.drawString(100, 690, analysis[:500])
    c.save()
    return output_path

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
async def finish(update: Update, context):
    user_id = update.effective_user.id
    logger.info(f"Received /finish from user {user_id}")
    if not is_authorized_user(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö! üòÑ")
        return ConversationHandler.END
    await update.message.reply_text("üéâ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω! –í–æ—Ç —Ç–æ–ø-3 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –≥–æ—Ç–æ–≤—ã—Ö —Å–∏—è—Ç—å –≤ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ! üåü")
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT resume_text, score, analysis FROM resumes WHERE vacancy_id = %s ORDER BY score DESC LIMIT 3",
        (context.user_data["vacancy_id"],)
    )
    shortlist = cursor.fetchall()
    cursor.close()
    conn.close()
    
    for i, (resume, score, analysis) in enumerate(shortlist, 1):
        await update.message.reply_text(f"üèÜ –ö–∞–Ω–¥–∏–¥–∞—Ç {i}:\n–û—Ü–µ–Ω–∫–∞: {score:.1f} ‚≠ê\n–ê–Ω–∞–ª–∏–∑: {analysis[:100]}")
    
    return ConversationHandler.END

# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
async def admin_view(update: Update, context):
    user_id = update.effective_user.id
    logger.info(f"Received /admin_view from user {user_id}")
    if not is_authorized_user(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≥–ª—è–Ω—É—Ç—å –∑–∞ –∫—É–ª–∏—Å—ã! üòÑ")
        return
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT role FROM users WHERE telegram_id = %s", (user_id,))
    role = cursor.fetchone()
    if role and role[0] != 'Admin':
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø! üëÆ‚Äç‚ôÇÔ∏è")
        cursor.close()
        conn.close()
        return
    cursor.execute("SELECT vacancy_id, resume_text, score, analysis FROM resumes")
    resumes = cursor.fetchall()
    cursor.close()
    conn.close()
    if not resumes:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—é–º–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞! –î–æ–±–∞–≤—å –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ä–µ–∑—é–º–µ! üåü")
        return
    for resume in resumes:
        await update.message.reply_text(f"üåü –í–∞–∫–∞–Ω—Å–∏—è #{resume[0]}: –û—Ü–µ–Ω–∫–∞ {resume[2]}, –ê–Ω–∞–ª–∏–∑: {resume[3][:100]}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers():
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add_user", add_user))
    application.add_handler(CommandHandler("add_vacancy", add_vacancy))
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("add_vacancy", add_vacancy)],
        states={
            VACANCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_vacancy)],
            RESUME: [MessageHandler(filters.Document.ALL, handle_resume)],
            PROCESSING: [
                CommandHandler("add_resume", add_vacancy),
                CommandHandler("finish", finish)
            ]
        },
        fallbacks=[]
    )
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("admin_view", admin_view))

# –í–µ–±—Ö—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"status": "ok"}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
setup_handlers()