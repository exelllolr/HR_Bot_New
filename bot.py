import os
from PyPDF2 import PdfReader
from docx import Document
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
import psycopg2
import requests
import re
import time
import logging
from tempfile import NamedTemporaryFile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN not found in .env!")
    raise ValueError("TELEGRAM_TOKEN not found in .env!")

DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
DB_CONFIG = {
    "dbname": os.getenv("DB_NAME", "postgres"),
    "user": os.getenv("DB_USER", "postgres"),
    "password": os.getenv("DB_PASSWORD", ""),
    "host": os.getenv("DB_HOST", ""),
    "port": os.getenv("DB_PORT", "5432")
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è Telegram Application
_application = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
VACANCY, RESUME, PROCESSING = range(3)

def get_application():
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application."""
    global _application
    if _application is None:
        logger.info("Initializing Telegram Application")
        _application = Application.builder().token(TELEGRAM_TOKEN).build()
        setup_handlers(_application)
    return _application

def get_db_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL."""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        logger.info("‚úÖ Database connection established!")
        return conn
    except Exception as e:
        logger.error(f"‚ùå Database connection failed: {e}")
        raise

def is_authorized_user(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT role FROM users WHERE telegram_id = %s", (user_id,))
        result = cursor.fetchone()
        logger.debug(f"Checking user {user_id}, result: {result}")
        cursor.close()
        conn.close()
        return result and result[0] in ["HR", "Employer", "Admin"]
    except Exception as e:
        logger.error(f"‚ùå Authorization check failed: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = update.effective_user.id
    logger.info(f"Received /start from user {user_id}")
    if not is_authorized_user(user_id):
        await update.message.reply_text("‚õî –û–π-–æ–π! –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Å –≤ –∫–æ–º–∞–Ω–¥—É! üìû")
        return
    await update.message.reply_text(
        "üåü –ü—Ä–∏–≤–µ—Ç, –≥–µ—Ä–æ–π –ø–æ–¥–±–æ—Ä–∞! –Ø —Ç–≤–æ–π AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –∑–≤–µ–∑–¥—É –¥–ª—è —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã! –ù–∞–∂–º–∏ /add_vacancy, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! ‚ú®"
    )

async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    logger.info(f"Received /add_user from user {user_id}")
    if not is_authorized_user(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö –≥–µ—Ä–æ–µ–≤! üòÑ")
        return
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT role FROM users WHERE telegram_id = %s", (user_id,))
    role = cursor.fetchone()
    if role and role[0] != 'Admin':
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! üëÆ‚Äç‚ôÇÔ∏è")
        cursor.close()
        conn.close()
        return
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /add_user <telegram_id> <role> (HR, Employer, Admin)! üìù")
        cursor.close()
        conn.close()
        return
    telegram_id, role = int(args[0]), args[1].capitalize()
    if role not in ["HR", "Employer", "Admin"]:
        await update.message.reply_text("‚ö†Ô∏è –†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å HR, Employer –∏–ª–∏ Admin! üòÑ")
        cursor.close()
        conn.close()
        return
    cursor.execute("INSERT INTO users (telegram_id, role) VALUES (%s, %s) ON CONFLICT DO NOTHING", (telegram_id, role))
    conn.commit()
    cursor.close()
    conn.close()
    await update.message.reply_text(f"üéâ –ù–æ–≤—ã–π –≥–µ—Ä–æ–π {telegram_id} —Å —Ä–æ–ª—å—é {role} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É! üöÄ")

async def add_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏."""
    user_id = update.effective_user.id
    logger.info(f"Received /add_vacancy from user {user_id}")
    if not is_authorized_user(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è HR –∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π! üòÑ")
        return ConversationHandler.END
    await update.message.reply_text(
        "üåü –í–≤–µ–¥–∏ –≤–∞–∫–∞–Ω—Å–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–æ–ª–∂–Ω–æ—Å—Ç—å, –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è, –ó–∞—Ä–ø–ª–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, Python, 120–∫')! ‚ú®"
    )
    return VACANCY

async def save_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏."""
    user_id = update.effective_user.id
    logger.info(f"Saving vacancy for user {user_id}")
    if not is_authorized_user(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! üòû")
        return ConversationHandler.END
    vacancy_data = update.message.text
    parts = vacancy_data.split(",", 2)
    if len(parts) < 2:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ –≤–∞–∫–∞–Ω—Å–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–æ–ª–∂–Ω–æ—Å—Ç—å, –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è, –ó–∞—Ä–ø–ª–∞—Ç–∞! üòÑ")
        return VACANCY
    position = parts[0].strip()
    requirements = parts[1].strip()
    salary = parts[2].strip() if len(parts) > 2 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    vacancy_data = f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}, –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {requirements}, –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary}"
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO vacancies (user_id, vacancy_data) VALUES (%s, %s) RETURNING id",
        (user_id, vacancy_data)
    )
    vacancy_id = cursor.fetchone()[0]
    conn.commit()
    cursor.close()
    conn.close()
    context.user_data["vacancy_id"] = vacancy_id
    context.user_data["vacancy_data"] = vacancy_data
    await update.message.reply_text(f"üéâ –í–∞–∫–∞–Ω—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ó–∞–≥—Ä—É–∑–∏ —Ä–µ–∑—é–º–µ (PDF/DOCX) –∏ –¥–∞–≤–∞–π –Ω–∞–π–¥—ë–º –∑–≤–µ–∑–¥—É! üåü")
    return RESUME

async def handle_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ."""
    user_id = update.effective_user.id
    logger.info(f"Handling resume for user {user_id}")
    if not is_authorized_user(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö! üòÑ")
        return ConversationHandler.END
    if not update.message.document:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª PDF –∏–ª–∏ DOCX! üòÑ")
        return RESUME
    file = await update.message.document.get_file()
    with NamedTemporaryFile(delete=False, suffix=".pdf" if update.message.document.mime_type == "application/pdf" else ".docx") as tmp_file:
        await file.download_to_drive(tmp_file.name)
        text = extract_text(tmp_file.name)
    if not text:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª! üòÑ")
        return RESUME
    vacancy_id = context.user_data.get("vacancy_id")
    if not vacancy_id:
        await update.message.reply_text("‚ö†Ô∏è –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /add_vacancy! üòÑ")
        return ConversationHandler.END
    score, analysis = analyze_resume(text, context.user_data.get("vacancy_data", ""))
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO resumes (vacancy_id, user_id, resume_text, score, analysis) VALUES (%s, %s, %s, %s, %s)",
        (vacancy_id, user_id, text, score, analysis)
    )
    conn.commit()
    cursor.close()
    conn.close()
    await update.message.reply_text(
        f"üéâ –†–µ–∑—é–º–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ! –û—Ü–µ–Ω–∫–∞: {score:.1f}, –ê–Ω–∞–ª–∏–∑: {analysis[:100]}...\n"
        "–•–æ—á–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë? (/add_resume) –ò–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å? (/finish) üöÄ"
    )
    return PROCESSING

def extract_text(file_path):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF –∏–ª–∏ DOCX."""
    try:
        if file_path.endswith(".pdf"):
            with open(file_path, "rb") as f:
                pdf = PdfReader(f)
                return " ".join(page.extract_text() or "" for page in pdf.pages)
        elif file_path.endswith(".docx"):
            doc = Document(file_path)
            return " ".join(paragraph.text or "" for paragraph in doc.paragraphs)
        return ""
    except Exception as e:
        logger.error(f"Error extracting text: {e}")
        return ""
    finally:
        try:
            os.unlink(file_path)
        except Exception as e:
            logger.error(f"Error deleting temp file: {e}")

def analyze_resume(resume_text, vacancy_data):
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ —Å –ø–æ–º–æ—â—å—é DeepSeek API."""
    if not DEEPSEEK_API_KEY:
        logger.error("DEEPSEEK_API_KEY not found!")
        return 5.0, "–û—à–∏–±–∫–∞: API-–∫–ª—é—á DeepSeek –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
    prompt = (
        f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—é–º–µ: {resume_text[:2000]}\n"
        f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy_data}\n"
        f"–û—Ü–µ–Ω–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10 —Å –æ–¥–Ω–∏–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–º –∑–Ω–∞–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7.5) –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º! üòÑ"
    )
    headers = {"Authorization": f"Bearer {DEEPSEEK_API_KEY}", "Content-Type": "application/json"}
    try:
        time.sleep(1)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è API
        response = requests.post(
            "https://api.deepseek.com/chat/completions",
            headers=headers,
            json={"model": "deepseek-chat", "messages": [{"role": "user", "content": prompt}], "stream": False}
        )
        response.raise_for_status()
        result = response.json()["choices"][0]["message"]["content"]
        score = extract_score(result)
        return score, result
    except Exception as e:
        logger.error(f"DeepSeek API error: {e}")
        return 5.0, f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? üòÑ"

def extract_score(gpt_response):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ DeepSeek."""
    match = re.search(r"\b\d+\.\d\b", gpt_response)
    return float(match.group()) if match else 5.0

async def finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –≤—ã–≤–æ–¥ shortlist."""
    user_id = update.effective_user.id
    logger.info(f"Received /finish from user {user_id}")
    if not is_authorized_user(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö! üòÑ")
        return ConversationHandler.END
    vacancy_id = context.user_data.get("vacancy_id")
    if not vacancy_id:
        await update.message.reply_text("‚ö†Ô∏è –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /add_vacancy! üòÑ")
        return ConversationHandler.END
    await update.message.reply_text("üéâ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω! –í–æ—Ç —Ç–æ–ø-3 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –≥–æ—Ç–æ–≤—ã—Ö —Å–∏—è—Ç—å –≤ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ! üåü")
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT resume_text, score, analysis FROM resumes WHERE vacancy_id = %s ORDER BY score DESC LIMIT 3",
        (vacancy_id,)
    )
    shortlist = cursor.fetchall()
    cursor.close()
    conn.close()
    if not shortlist:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—é–º–µ –¥–ª—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏! –ó–∞–≥—Ä—É–∑–∏ –µ—â—ë! üòÑ")
        return ConversationHandler.END
    for i, (resume, score, analysis) in enumerate(shortlist, 1):
        await update.message.reply_text(f"üèÜ –ö–∞–Ω–¥–∏–¥–∞—Ç {i}:\n–û—Ü–µ–Ω–∫–∞: {score:.1f} ‚≠ê\n–ê–Ω–∞–ª–∏–∑: {analysis[:100]}...")
    context.user_data.clear()
    return ConversationHandler.END

async def admin_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–µ–∑—é–º–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."""
    user_id = update.effective_user.id
    logger.info(f"Received /admin_view from user {user_id}")
    if not is_authorized_user(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≥–ª—è–Ω—É—Ç—å –∑–∞ –∫—É–ª–∏—Å—ã! üòÑ")
        return
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT role FROM users WHERE telegram_id = %s", (user_id,))
    role = cursor.fetchone()
    if role and role[0] != 'Admin':
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø! üëÆ‚Äç‚ôÇÔ∏è")
        cursor.close()
        conn.close()
        return
    cursor.execute("SELECT vacancy_id, resume_text, score, analysis FROM resumes")
    resumes = cursor.fetchall()
    cursor.close()
    conn.close()
    if not resumes:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—é–º–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞! –î–æ–±–∞–≤—å –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ä–µ–∑—é–º–µ! üåü")
        return
    for resume in resumes:
        await update.message.reply_text(f"üåü –í–∞–∫–∞–Ω—Å–∏—è #{resume[0]}: –û—Ü–µ–Ω–∫–∞ {resume[2]:.1f}, –ê–Ω–∞–ª–∏–∑: {resume[3][:100]}...")

def setup_handlers(application: Application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ ConversationHandler."""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add_user", add_user))
    application.add_handler(CommandHandler("admin_view", admin_view))
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("add_vacancy", add_vacancy)],
        states={
            VACANCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_vacancy)],
            RESUME: [MessageHandler(filters.Document.ALL, handle_resume)],
            PROCESSING: [
                CommandHandler("add_resume", add_vacancy),
                CommandHandler("finish", finish)
            ]
        },
        fallbacks=[]
    )
    application.add_handler(conv_handler)